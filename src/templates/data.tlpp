#include "tlpp-core.th"
#include 'tlpp-rest.th'

Namespace namespace.nomedocomponente
Using Namespace namespace.nomedocomponente.utils

Class NomedocomponenteData From FWAdapterBaseV2
    Public Data oHashFields as Object
    Public Method new()     as Object
    Public Method getNomedocomponente() as Logical
    Public Method deleteNomedocomponente() as Logical
    Public Method putNomedocomponente() as Logical
    Public Method postNomedocomponente() as Logical
EndClass

Method new(cVerb as Character) as Object Class NomedocomponenteData
   _Super:new(cVerb, .T.)
Return Self

Method getNomedocomponente(cWhere) CLASS NomedocomponenteData
   Local aArea      := FwGetArea() AS array

   AddMapFieldsNomedocomponente(self)
   ::SetQuery(GetQueryNomedocomponente())
   
   ::SetWhere( cWhere )
   If ::Execute()
      ::FillGetResponse()
   EndIf

   FwrestArea(aArea)
Return .T.

Static Function GetQueryNomedocomponente()
   Local cQuery AS CHARACTER

   cQuery := "SELECT DISTINCT #QueryFields#"
   cQuery +=  " FROM "+RetSQLName("SA1")+" SA1 "
   cQuery += " WHERE #QueryWhere#"
Return cQuery


Method deleteNomedocomponente() as Logical Class NomedocomponenteData
   Local oModel      := nil   as Object
   Local lRet        := .T.   as Logical

    oModel := FWLoadModel("nomedoComponente")
    oModel:SetOperation(5)
    oModel:Activate()

    If !lRet .Or. !( oModel:VldData() .And. oModel:CommitData() )
        lRet := .F.
        SetRestFault(400, namespace.lib.Utils():GetMVCParsingMessage(oModel))
    Endif

    oModel:DeActivate()
    FreeObj(oModelZBA)
    FreeObj(oModel)
Return lRet

Method postNomedocomponente(jBody as Json) as Logical Class NomedocomponenteData
   Local oModel      := nil   as Object
   Local lRet        := .T.   as Logical

    oModel := FWLoadModel("nomedoComponente")
    oModel:SetOperation(3)
    oModel:Activate()

    If !lRet .Or. !( oModel:VldData() .And. oModel:CommitData() )
        lRet := .F.
        SetRestFault(400, namespace.lib.Utils():GetMVCParsingMessage(oModel))
    Endif

    oModel:DeActivate()
    FreeObj(oModelZBA)
    FreeObj(oModel)
Return lRet 

Method putNomedocomponente(jBody as Json) as Logical Class NomedocomponenteData
   Local oModel      := nil   as Object
   Local lRet        := .T.   as Logical

    oModel := FWLoadModel("nomedoComponente")
    oModel:SetOperation(4)
    oModel:Activate()

    If !lRet .Or. !( oModel:VldData() .And. oModel:CommitData() )
        lRet := .F.
        SetRestFault(400, namespace.lib.Utils():GetMVCParsingMessage(oModel))
    Endif

    oModel:DeActivate()
    FreeObj(oModelZBA)
    FreeObj(oModel)
Return lRet 


Static Function AddMapFieldsNomedocomponente(oSelf as Object)
   oSelf:AddMapFields("nome","A1_NOME",    .T., .T., {'A1_NOME',    'C', TamSX3( 'A1_NOME' )[1],    0})
Return Nil
